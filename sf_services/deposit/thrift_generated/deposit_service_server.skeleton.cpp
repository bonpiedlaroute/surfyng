// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "deposit_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class deposit_serviceHandler : virtual public deposit_serviceIf {
 public:
  deposit_serviceHandler() {
    // Your initialization goes here
  }

  void announce_deposit(DepositResult& _return, const std::string& user_id, const std::string& data) {
    // Your implementation goes here
    printf("announce_deposit\n");
  }

  void delete_announce(DepositResult& _return, const std::string& user_id, const std::string& announce_id) {
    // Your implementation goes here
    printf("delete_announce\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<deposit_serviceHandler> handler(new deposit_serviceHandler());
  shared_ptr<TProcessor> processor(new deposit_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

